# -*- Mode: makefile -*-

include ../config-host.mak
include config-target.mak
include config-devices.mak
include $(SRC_PATH)/rules.mak

$(call set-vpath, $(SRC_PATH))
ifdef CONFIG_LINUX
QEMU_CFLAGS += -I../linux-headers
endif
QEMU_CFLAGS += -I.. -I$(SRC_PATH)/target-$(TARGET_BASE_ARCH) -DNEED_CPU_H

QEMU_CFLAGS+=-I$(SRC_PATH)/include

ifdef CONFIG_USER_ONLY
# user emulator name
QEMU_PROG=qemu-$(TARGET_NAME)
else
# system emulator name
ifneq (,$(findstring -mwindows,$(libs_softmmu)))
# Terminate program name with a 'w' because the linker builds a windows executable.
QEMU_PROGW=qemu-system-$(TARGET_NAME)w$(EXESUF)
endif # windows executable
QEMU_PROG=qemu-system-$(TARGET_NAME)$(EXESUF)
endif

PROGS=$(QEMU_PROG)
ifdef QEMU_PROGW
PROGS+=$(QEMU_PROGW)
endif
STPFILES=

config-target.h: config-target.h-timestamp
config-target.h-timestamp: config-target.mak

ifdef CONFIG_TRACE_SYSTEMTAP
stap: $(QEMU_PROG).stp-installed $(QEMU_PROG).stp

ifdef CONFIG_USER_ONLY
TARGET_TYPE=user
else
TARGET_TYPE=system
endif

$(QEMU_PROG).stp-installed: $(SRC_PATH)/trace-events
	$(call quiet-command,$(TRACETOOL) \
		--format=stap \
		--backend=$(TRACE_BACKEND) \
		--binary=$(bindir)/$(QEMU_PROG) \
		--target-name=$(TARGET_NAME) \
		--target-type=$(TARGET_TYPE) \
		< $< > $@,"  GEN   $(TARGET_DIR)$(QEMU_PROG).stp-installed")

$(QEMU_PROG).stp: $(SRC_PATH)/trace-events
	$(call quiet-command,$(TRACETOOL) \
		--format=stap \
		--backend=$(TRACE_BACKEND) \
		--binary=$(realpath .)/$(QEMU_PROG) \
		--target-name=$(TARGET_NAME) \
		--target-type=$(TARGET_TYPE) \
		< $< > $@,"  GEN   $(TARGET_DIR)$(QEMU_PROG).stp")

else
stap:
endif

all: $(PROGS) stap

# Dummy command so that make thinks it has done something
	@true

#########################################################
# cpu emulator library
obj-y = exec.o translate-all.o cpu-exec.o
obj-y += tcg/tcg.o tcg/optimize.o
obj-$(CONFIG_TCG_PLUGIN) += tcg/tcg-plugin.o
obj-$(CONFIG_TCG_INTERPRETER) += tci.o
obj-$(CONFIG_TCG_INTERPRETER) += disas/tci.o
obj-y += fpu/softfloat.o
obj-y += target-$(TARGET_BASE_ARCH)/
obj-y += disas.o
obj-$(call notempty,$(TARGET_XML_FILES)) += gdbstub-xml.o
obj-$(call lnot,$(CONFIG_KVM)) += kvm-stub.o

#########################################################
# Linux user emulator target

ifdef CONFIG_LINUX_USER

QEMU_CFLAGS+=-I$(SRC_PATH)/linux-user/$(TARGET_ABI_DIR) -I$(SRC_PATH)/linux-user

obj-y += linux-user/
obj-y += gdbstub.o thunk.o user-exec.o

endif #CONFIG_LINUX_USER

#########################################################
# BSD user emulator target

ifdef CONFIG_BSD_USER

QEMU_CFLAGS+=-I$(SRC_PATH)/bsd-user -I$(SRC_PATH)/bsd-user/$(TARGET_ABI_DIR)

obj-y += bsd-user/
obj-y += gdbstub.o user-exec.o

endif #CONFIG_BSD_USER

#########################################################
# System emulator target
ifdef CONFIG_SOFTMMU
obj-y += arch_init.o cpus.o monitor.o gdbstub.o balloon.o ioport.o
obj-y += qtest.o
obj-y += hw/
obj-$(CONFIG_FDT) += device_tree.o
obj-$(CONFIG_KVM) += kvm-all.o
obj-y += memory.o savevm.o cputlb.o
obj-y += memory_mapping.o
obj-y += dump.o
LIBS+=$(libs_softmmu)

# xen support
obj-$(CONFIG_XEN) += xen-all.o xen-mapcache.o
obj-$(call lnot,$(CONFIG_XEN)) += xen-stub.o

# Hardware support
ifeq ($(TARGET_NAME), sparc64)
obj-y += hw/sparc64/
else
obj-y += hw/$(TARGET_BASE_ARCH)/
endif

main.o: QEMU_CFLAGS+=$(GPROF_CFLAGS)

GENERATED_HEADERS += hmp-commands.h qmp-commands-old.h

endif # CONFIG_SOFTMMU

#########################################################
# TCG plugin targets

ifdef CONFIG_TCG_PLUGIN

ifdef CONFIG_USER_ONLY
EMULATION_MODE=user
else
EMULATION_MODE=system
endif

TCG_PLUGINS := $(patsubst $(SRC_PATH)/tcg/plugins/%.c,tcg-plugin-%.so,$(wildcard $(SRC_PATH)/tcg/plugins/*.c))
TCG_PLUGINS += tcg-plugin-dineroIV-custom.so

all: $(TCG_PLUGINS)

.SECONDARY: $(TCG_PLUGINS:.so=.o)

tcg/tcg-plugin.o: QEMU_CFLAGS += -DEMULATION_MODE=\"$(EMULATION_MODE)\"

tcg-plugin-%.o: QEMU_CFLAGS += -fno-PIE -fPIC -DEMULATION_MODE=\"$(EMULATION_MODE)\"
tcg-plugin-%.o: $(SRC_PATH)/tcg/plugins/%.c
	$(call COMPILE_CC)

tcg-plugin-%.so: LDFLAGS += -shared
tcg-plugin-%.so: tcg-plugin-%.o
	$(call LINK,$^)

D4_SRC=$(SRC_PATH)/tcg/plugins/d4-7

d4-7/Makefile d4-7/config.h: $(D4_SRC)/configure
	mkdir -p d4-7
	cd d4-7 && rm -f Makefile config.h && env CFLAGS="-O3 -fvisibility=hidden -flto -DD4ADDR=uint64_t -include stdint.h -fPIC -I$${PWD}" $<

D4_LIB_OBJS=d4-7/ref.o d4-7/misc.o
D4_CMD_OBJS=d4-7/cmdmain.o d4-7/cmdargs.o d4-7/tracein.o d4-7/xdinfmt.o d4-7/dinfmt.o d4-7/binaryfmt.o d4-7/pixie32fmt.o d4-7/pixie64fmt.o
$(D4_LIB_OBJS) $(D4_CMD_OBJS): d4-7/%.o: d4-7/Makefile d4-7/config.h
	cd d4-7 && rm -f $*.o && env MAKEFLAGS= $(MAKE) $*.o

d4-7/libd4.a: $(D4_LIB_OBJS) d4-7/Makefile d4-7/config.h
	cd d4-7 && rm -f libd4.a && env MAKEFLAGS= $(MAKE) libd4.a

d4-7/dineroIV: $(D4_CMD_OBJS) d4-7/libd4.a d4-7/Makefile d4-7/config.h
	cd d4-7 && rm -f dineroIV && env MAKEFLAGS= $(MAKE) dineroIV

d4-7/d4prebuilt.o: d4-7/dineroIV
	cd d4-7 && rm -f d4-7/d4custom.o && env MAKEFLAGS= D4_SRC=$(D4_SRC) ./dineroIV -custom d4prebuilt -l1-isize 16k -l1-dsize 8192 -l1-ibsize 32 -l1-dbsize 16 </dev/null >/dev/null

tcg-plugin-dineroIV-custom.o: CFLAGS += -fvisibility=hidden -flto -O3 -DD4CUSTOM
tcg-plugin-dineroIV-custom.o: tcg-plugin-%.o: $(SRC_PATH)/tcg/plugins/dineroIV.c
	$(call COMPILE_CC)

tcg-plugin-dineroIV-custom.so:  CFLAGS += -fvisibility=hidden -fno-PIE -fPIC -flto -O3 -DD4CUSTOM
tcg-plugin-dineroIV-custom.so: tcg-plugin-dineroIV-custom.o d4-7/d4prebuilt.o d4-7/libd4.a
	$(call LINK,$^)

tcg-plugin-dineroIV.o: CFLAGS += -fvisibility=hidden -flto -O3
tcg-plugin-dineroIV.o: tcg-plugin-%.o: $(SRC_PATH)/tcg/plugins/dineroIV.c
	$(call COMPILE_CC)

tcg-plugin-dineroIV.so: CFLAGS += -fvisibility=hidden -fno-PIE -fPIC -flto -O3
tcg-plugin-dineroIV.so: tcg-plugin-dineroIV.o $(D4_CMD_OBJS) d4-7/libd4.a
	$(call LINK,$^)

endif # CONFIG_TCG_PLUGIN

# Workaround for http://gcc.gnu.org/PR55489, see configure.
%/translate.o: QEMU_CFLAGS += $(TRANSLATE_OPT_CFLAGS)

nested-vars += obj-y

# This resolves all nested paths, so it must come last
include $(SRC_PATH)/Makefile.objs

all-obj-y = $(obj-y)
all-obj-y += $(addprefix ../, $(common-obj-y))

ifndef CONFIG_HAIKU
LIBS+=-lm
endif

ifdef QEMU_PROGW
# The linker builds a windows executable. Make also a console executable.
$(QEMU_PROGW): $(all-obj-y) ../libqemuutil.a ../libqemustub.a
	$(call LINK,$^)
$(QEMU_PROG): $(QEMU_PROGW)
	$(call quiet-command,$(OBJCOPY) --subsystem console $(QEMU_PROGW) $(QEMU_PROG),"  GEN   $(TARGET_DIR)$(QEMU_PROG)")
else
$(QEMU_PROG): $(all-obj-y) ../libqemuutil.a ../libqemustub.a
	$(call LINK,$^)
endif

gdbstub-xml.c: $(TARGET_XML_FILES) $(SRC_PATH)/scripts/feature_to_c.sh
	$(call quiet-command,rm -f $@ && $(SHELL) $(SRC_PATH)/scripts/feature_to_c.sh $@ $(TARGET_XML_FILES),"  GEN   $(TARGET_DIR)$@")

hmp-commands.h: $(SRC_PATH)/hmp-commands.hx
	$(call quiet-command,sh $(SRC_PATH)/scripts/hxtool -h < $< > $@,"  GEN   $(TARGET_DIR)$@")

qmp-commands-old.h: $(SRC_PATH)/qmp-commands.hx
	$(call quiet-command,sh $(SRC_PATH)/scripts/hxtool -h < $< > $@,"  GEN   $(TARGET_DIR)$@")

clean:
	rm -f *.a *~ $(PROGS)
	rm -f $(shell find . -name '*.[od]')
	rm -f hmp-commands.h qmp-commands-old.h gdbstub-xml.c
ifdef CONFIG_TRACE_SYSTEMTAP
	rm -f *.stp
endif
ifdef CONFIG_TCG_PLUGIN
	rm -f $(TCG_PLUGINS)
endif

install: all
ifneq ($(PROGS),)
	$(INSTALL) -m 755 $(PROGS) "$(DESTDIR)$(bindir)"
ifneq ($(STRIP),)
	$(STRIP) $(patsubst %,"$(DESTDIR)$(bindir)/%",$(PROGS))
endif
endif
ifdef CONFIG_TRACE_SYSTEMTAP
	$(INSTALL_DIR) "$(DESTDIR)$(qemu_datadir)/../systemtap/tapset"
	$(INSTALL_DATA) $(QEMU_PROG).stp-installed "$(DESTDIR)$(qemu_datadir)/../systemtap/tapset/$(QEMU_PROG).stp"
endif
ifdef CONFIG_TCG_PLUGIN
	$(INSTALL_DIR) "$(DESTDIR)$(libexecdir)/$(TARGET_NAME)/$(EMULATION_MODE)"
	$(INSTALL_PROG) $(TCG_PLUGINS) "$(DESTDIR)$(libexecdir)/$(TARGET_NAME)/$(EMULATION_MODE)"
endif

GENERATED_HEADERS += config-target.h
Makefile: $(GENERATED_HEADERS)
